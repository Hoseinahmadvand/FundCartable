// <auto-generated />
using System;
using FundCartable.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FundCartable.Migrations
{
    [DbContext(typeof(FundAppContext))]
    partial class FundAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FundCartable.Models.Funds.AccountNumbers", b =>
                {
                    b.Property<int>("AccountNumber_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountNumber_Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fund_Id")
                        .HasColumnType("int");

                    b.Property<int>("Fund_Id1")
                        .HasColumnType("int");

                    b.HasKey("AccountNumber_Id");

                    b.HasIndex("Fund_Id1");

                    b.ToTable("accountNumbers");
                });

            modelBuilder.Entity("FundCartable.Models.Funds.Admins", b =>
                {
                    b.Property<int>("Admin_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Admin_ID"));

                    b.Property<string>("Admin_Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Admin_UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fund_Id")
                        .HasColumnType("int");

                    b.Property<int>("Fund_Id1")
                        .HasColumnType("int");

                    b.HasKey("Admin_ID");

                    b.HasIndex("Fund_Id1");

                    b.ToTable("admins");
                });

            modelBuilder.Entity("FundCartable.Models.Funds.Fund", b =>
                {
                    b.Property<int>("Fund_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Fund_Id"));

                    b.Property<string>("Fund_Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fund_Count")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fund_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fund_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Fund_Id");

                    b.ToTable("funds");
                });

            modelBuilder.Entity("FundCartable.Models.Funds.Phones", b =>
                {
                    b.Property<int>("Phone_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Phone_Id"));

                    b.Property<int>("Fund_Id")
                        .HasColumnType("int");

                    b.Property<int>("Fund_Id1")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Phone_Id");

                    b.HasIndex("Fund_Id1");

                    b.ToTable("phones");
                });

            modelBuilder.Entity("FundCartable.Models.Tranceaction.Installment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Leon_Id")
                        .HasColumnType("int");

                    b.Property<int>("LoanId")
                        .HasColumnType("int");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Leon_Id");

                    b.ToTable("installments");
                });

            modelBuilder.Entity("FundCartable.Models.Tranceaction.Leon", b =>
                {
                    b.Property<int>("Leon_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Leon_Id"));

                    b.Property<decimal>("Leon_Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Leon_DateEnded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Leon_DateStarted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Leon_Term")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Leon_Id");

                    b.HasIndex("UserId");

                    b.ToTable("leons");
                });

            modelBuilder.Entity("FundCartable.Models.Tranceaction.Monthly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Monthlies");
                });

            modelBuilder.Entity("FundCartable.Models.Users.User", b =>
                {
                    b.Property<int>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_Id"));

                    b.Property<int>("Fund_Id")
                        .HasColumnType("int");

                    b.Property<int>("Fund_Id1")
                        .HasColumnType("int");

                    b.Property<int>("User_AccountId")
                        .HasColumnType("int");

                    b.Property<string>("User_BirthDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_IRCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_Id");

                    b.HasIndex("Fund_Id1");

                    b.ToTable("users");
                });

            modelBuilder.Entity("FundCartable.Models.Funds.AccountNumbers", b =>
                {
                    b.HasOne("FundCartable.Models.Funds.Fund", "fund")
                        .WithMany()
                        .HasForeignKey("Fund_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fund");
                });

            modelBuilder.Entity("FundCartable.Models.Funds.Admins", b =>
                {
                    b.HasOne("FundCartable.Models.Funds.Fund", "fund")
                        .WithMany("Admins")
                        .HasForeignKey("Fund_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fund");
                });

            modelBuilder.Entity("FundCartable.Models.Funds.Phones", b =>
                {
                    b.HasOne("FundCartable.Models.Funds.Fund", "fund")
                        .WithMany()
                        .HasForeignKey("Fund_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fund");
                });

            modelBuilder.Entity("FundCartable.Models.Tranceaction.Installment", b =>
                {
                    b.HasOne("FundCartable.Models.Tranceaction.Leon", "leon")
                        .WithMany("Installments")
                        .HasForeignKey("Leon_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("leon");
                });

            modelBuilder.Entity("FundCartable.Models.Tranceaction.Leon", b =>
                {
                    b.HasOne("FundCartable.Models.Users.User", "User")
                        .WithMany("leons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FundCartable.Models.Tranceaction.Monthly", b =>
                {
                    b.HasOne("FundCartable.Models.Users.User", "User")
                        .WithMany("Monthly")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FundCartable.Models.Users.User", b =>
                {
                    b.HasOne("FundCartable.Models.Funds.Fund", "Fund")
                        .WithMany("Users")
                        .HasForeignKey("Fund_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fund");
                });

            modelBuilder.Entity("FundCartable.Models.Funds.Fund", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FundCartable.Models.Tranceaction.Leon", b =>
                {
                    b.Navigation("Installments");
                });

            modelBuilder.Entity("FundCartable.Models.Users.User", b =>
                {
                    b.Navigation("Monthly");

                    b.Navigation("leons");
                });
#pragma warning restore 612, 618
        }
    }
}
